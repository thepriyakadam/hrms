c
exit
 params[:flag] = "Full"
 @employee_leav_request.leave_count = 0.5
params[:flag]
c
tp  @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).where("in_time.strftime("%I:%M") > = ?" , @company_time.strftime("%I:%M"))
tp  @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).where("in_time.to_time > = ?" , @company_time.to_time)
 @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).where("in_time.to_time > = ?" , @company_time.to_time)
 @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).where("in_time > = ?" , @company_time.to_time)
 @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).where("in_time > = ?" , @company_time)
tp @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).where("in_time > = ?" , @company_time)
tp @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil).count
tp @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil).count
tp @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where.not(in_time: nil)
tp @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil)
tp @employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil).count
@company_time = params[:company_time]
@to_date = params[:to_date]
@from_date = params[:from_date]
c
@employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil).count
@employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil)
@company_time = params[:company_time]
@to_date = params[:to_date]
@from_date = params[:from_date]
@employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil)@from_date = params[:from_date]
@employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil)
c
@employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil).count
@employee_attendances = EmployeeAttendance.where(day: @from_date.to_date..@to_date.to_date).where("in_time > ?",@company_time).where.not(in_time: nil)
@company_time = params[:company_time]
@to_date = params[:to_date]
@from_date = params[:from_date]
c
params[:latemark_master][:employee_attendance]
params[:employee_attendance]
emp = params[:employee_attendance]
exit
 employee_attendance.in_time.strftime("%I:%M") > @company_time
if employee_attendance.in_time.strftime("%I:%M") > @company_time
employee_attendance.in_time.strftime("%I:%M") > @company_time
 @company_time
employee_attendance.in_time.strftime("%I:%M")
exit
@company_time
employee_attendance.in_time.strftime("%I:%M")
employee_attendance.in_time.strftime("%I:%M") > @company_time
exit
EXIT
C
employee_attendance.in_time.strftime("%I:%M")
C
employee_attendance.in_time.strftime("%I:%M")
employee_attendance.in_time.strftime("%I:%M") > @company_time
employee_attendance.in_time.strftime("%I:%M:%S") > @company_time
employee_attendance.in_time.strftime("%I:%M:%S") > @company_time.strftime("%I:%M:%S")
employee_attendance.in_time.to_time > @company_time.to_time
@company_time.to_time
employee_attendance.in_time.to_time
c
employee_attendance
c
@employee_attendances = EmployeeAttendance.where("in_time.strftime("%I%M%S") > ?",t).count
@employee_attendances = EmployeeAttendance.where("in_time.strftime("%I:%M:%S") > ?",t).last(2)
@employee_attendances = EmployeeAttendance.where("in_time > ?",t).last(2)
@employee_attendances = EmployeeAttendance.where("in_time > ?",t).count
@employee_attendances = EmployeeAttendance.where("day = ? && in_time > ?","@from_date.to_date".."@to_date.to_date",t)
t = @company_time.strftime("%I:%M:%S")
T = @company_time.strftime("%I:%M:%S")
@company_time.strftime("%I:%M:%S")
@company_time.strftime("%I:%M:%L")
@company_time.strftime("%I:%M:%P")
@company_time.strftime("%I:%M")
@company_time = @latemark_master.company_time
@employee_attendances = EmployeeAttendance.where("day = ? && in_time > ?","@from_date.to_date".."@to_date.to_date",@company_time)
@employee_attendances = EmployeeAttendance.where("day = ? && in_time > ?",@from_date.to_date..@to_date.to_date,@company_time)
@employee_attendances = EmployeeAttendance.where("day = ? && in_time > ?",@from_date.to_date..@to_date.to_date,@company_time.to_time)
@employee_attendances = EmployeeAttendance.where("day = ? && in_time > ?",@company_time.to_time,@from_date.to_date..@to_date.to_date)
@employee_attendances = EmployeeAttendance.where("in_time > ?",@company_time.to_time)
 @company_time.strftime("%I:%M%p")
@company_time = @latemark_master.company_time
c
tp @employee_attendances = EmployeeAttendance.where("in_time > ?",@company_time.to_time).where(day: @from_date.to_date..@to_date.to_date)
@employee_attendances = EmployeeAttendance.where("in_time > ?",@company_time.to_time).where(day: @from_date.to_date..@to_date.to_date)
@company_time.strftime("%I:%M%p")
@company_time.to_time
@company_time = @latemark_master.company_time
@latemark_master = LatemarkMaster.last
@to_date = params[:latemark_master][:to_date]
 @from_date = params[:latemark_master][:from_date]
exit
@employee.update(employee_params)
employee_params
@employee_option == "Rehire"
@employee = Employee.new(employee_params)
@employee_option = params[:employee][:employee_option]
c
@employee_option = params[:employee][:employee_option]
@employee_option = params[:employee_option]
c
@emp
 @emp_option
c
@emp_option = params[:emp_option]
c
@emp_option = params[:emp_option]
c
@emp_option
@emp_option = params[:flag1]
c
hidden_field_tag :flag1,value: @employee_option
 <%= hidden_field_tag :flag1,value: @employee_option %>
<%= hidden_field_tag :flag1, @employee_option %>
hidden_field_tag :flag1,value: @employee_option
params[:flag1]
flag1
hidden_field_tag
hidden_field_tag :flag1, @employee_option
 @employee_option
return self if value.nil?
value
c
@emp_option = params[:common][:flag1]
@emp_option = params[:flag1]
c
@emp_option = params[:flag1]
c
@emp_option = params[:flag1]
c
flag = params[:emp_option]
c
flag = params[:emp_option]
c
flag = params[:flag1]
exit
EXIT
C
emp = params[:emp_id]
@employee == nil
@employee = Employee.find(params[:emp_id])
c
@current_address = @employee.try(:current_address)
@country_id = @employee.try(:country_id)
@district_id = @employee.try(:district_id)
@state_id = @employee.try(:state_id)
@city = @employee.try(:city)
exit
employee_atten = EmployeeAttendance.where(employee_id: employee.id,day: day.to_date).take
employee = Employee.find_by(manual_employee_code: employee_code)
present = spreadsheet.cell(i,'G')
working_hrs = spreadsheet.cell(i,'F')
out_time = spreadsheet.cell(i,'E')
in_time = spreadsheet.cell(i,'D') #@employee.id
day = spreadsheet.cell(i,'C')
employee_name = spreadsheet.cell(i,'B')
employee_code = spreadsheet.cell(i,'A').to_i
exit
@method
@method = GoalRating.import(params[:file],employee,goal_bunch)
@method 
c
tp a = GoalRating.where(appraisee_id: emp,period_id: period_id)
a.goal_weightage
a = GoalRating.where(appraisee_id: emp,period_id: period_id)
weightage_sum = sum(:goal_weightage)
c
spreadsheet.cell(i,'H')
Weightage
weightage_sum = sum(Weightage)
weightage_sum = sum(:Weightage)
weightage = spreadsheet.cell(i,'H')
sum(a)
sum(a).to_i
sum(a)
sum(:a)
a = spreadsheet.cell(i,'H')
sum(:spreadsheet.cell(i,'H'))
spreadsheet.cell(i,'H')
weightage_sum = sum(:goal_weightage)
weightage_sum = sum(:weightage)
c
 weightage_sum = sum(:goal_weightage)
c
@am == false
@am 
c
weightage_sum1
weightage_sum
@weightage_sum
exit
 @weightage_sum
c
@weightage_sum 
c
weightage_sum
params
c
params
file
exit
c
period_name = spreadsheet.cell(i,'C')
emp = Employee.find_by(manual_employee_code: employee_code)
employee_code = spreadsheet.cell(i,'B').to_i
c
 attribute_master_id = attribute.id
 attribute
 attribute_master = attribute.update(status: true)
a = attribute_master
 attribute_master = attribute.update(status: true)
 attribute_master_id = attribute_master.id
 attribute_master = attribute.update(status: true)
attribute_master = attribute.update(status: true)
attribute_master_id = attribute_master.id
attribute
attribute_master = attribute.update(status: true)
attribute
attribute.nil?
if attribute.nil?
attribute = AttributeMaster.find_by(name: perspective)
c
tp attribute_master 
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure)
attribute_master_id = attribute_master.id
attribute_master = AttributeMaster.create(id: new_id,code: new_code,name: perspective,status: true)
new_id = last_attribute.id.to_i + 1
 new_code = last_code.to_i + 1
last_code = last_attribute.code
last_attribute = AttributeMaster.last
perspective = spreadsheet.cell(i,'E')
c
attribute_master = AttributeMaster.create(id: a,code: new_code,name: perspective,status: true)
a = last_attribute.id + 1
attribute_master = AttributeMaster.create(id: last_attibute.id.to_i + 1,code: new_code,name: perspective,status: true)
last_attribute.id
last_attribute = AttributeMaster.last
attribute_master.save
attribute_master = AttributeMaster.create(code: new_code,name: perspective,status: true)
attribute_master_id
                  target: target,aligned: align_to_supervisor,period_id: period.id,goal_type: type,goal_setter_id: emp.id,
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure,
                  appraisee_id: emp.id,appraiser_id: emp.manager_id)
                  target: target,aligned: align_to_supervisor,period_id: period.id,goal_type: type,goal_setter_id: emp.id,
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure,
                  appraisee_id: emp.id,appraiser_id: emp.manager_id)
                  target: target,aligned: align_to_supervisor,period_id: period.id,goal_type: type,goal_setter_id: emp.id,
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure,
attribute_master_id = attribute_master.id
tp attribute_master = AttributeMaster.create(code: new_code,name: perspective,status: true)
attribute_master = AttributeMaster.create(code: new_code,name: perspective,status: true)
new_code = last_code.to_i + 1
last_code = last_attribute.code
last_attribute = AttributeMaster.last
perspective = spreadsheet.cell(i,'E')
 attribute_master == nil
