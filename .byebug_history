exit
@id = params[:employee][:id]
exit
@emp_contribution = EmployerContribution.where(employee_id: @salaryslips_1,date: @salaryslips_1)
@salaryslips_1 = Salaryslip.where(month: @month.to_s, year: @year.to_s).pluck(:employee_id,:month_year)
@salaryslips = Salaryslip.where(month: @month.to_s, year: @year.to_s)
@year = params[:year]
@month = params[:month]
exit
@emp_contribution.actual_pf
@emp_contribution = EmployerContribution.where(employee_id: @salaryslip.employee_id,date: @sal_slip_date)
@sal_slip_date = Salaryslip.where(id: @salaryslip.id).pluck(:month_year)
@salaryslip = Salaryslip.find(params[:format])
exit
exit\
@emp_contribution = EmployerContribution.where(employee_id: @salaryslip.employee_id,date: @sal_slip_date)
@sal_slip_date = Salaryslip.where(id: @salaryslip.id).pluck(:month_year)
@salaryslip = Salaryslip.find(params[:format])
exit
@emp_contribution = EmployerContribution.where(employee_id: @salaryslip.employee_id,date: @sal_slip_date)
@sal_slip_date = Salaryslip.where(id: @salaryslip.id).pluck(:month_year)
@salaryslip = Salaryslip.find(params[:format])
 @instalment_array = []
exit
exit]\
b=@employee_leav_request.second_reporter_id
a=@employee_leav_request.first_reporter_id
exit
b=@employee_leav_request.second_reporter_id
a=@employee_leav_request.first_reporter_id
exit
b=@employee_leav_request.second_reporter_id
a=@employee_leav_request.first_reporter_id
exit
tp @pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id)
tp @pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id).count
@pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id).count
@pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id)
exit
end
formula_item_calculated_amount = formula_item_actual_amount / working_day.try(:day_in_month) * working_day.try(:payable_day).to_f
formula_item_calculated_amount = formula_item_actual_amount / working_day.try(:day_in_month) * working_day.try(:payable_day)
exit
formula_string = @retention.base_component.split(',')
exit
formula_total_actual_amount += formula_item_actual_amount
exit
formula_total_actual_amount += formula_item_actual_amount
formula_item_actual_amount = formula_item.monthly_amount
exit
deducted_actual_amount = (formula_total_actual_amount / 100 * @retention.persent).ceil
