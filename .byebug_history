c
@salary_map_sap
@salary_map_sap.id
SalaryMapSap.where(id: @salary_map_sap.id).update_all(company_location_id: @company_location)
@company_location = params[:food_deduction][:company_location_id]
exit
@company_location = params[:food_deduction][:company_location_id]
@company_location = [:food_deduction][:company_location_id]
exit
c
exit
sum = (monthly_amount + 1).toFixed(2);
exit
      }
        $('#abc_<%= item.try(:salary_component_id) %>').val(sum);
        }
          sum = (monthly_amount + 1).toFixed(2);
        else {
        }
          sum = " ";
        if(isNaN(monthly_amount)){
        var sum = "";
        var monthly_amount = parseFloat($('#monthly_amount_<%= item.try(:salary_component_id) %>').val()); 
function calculate_sum(){
calculate_sum()
exit
sum_1
sum_1_
sum_1
$('#abc_'+child[i]).val((sum_1).toFixed(2));
exit
c
/vacancy_masters/vacancy_resume
exit
@emp_leave_bal1.try(:no_of_leave).to_f
@employee_leav_request.leave_count.to_f
@employee_leav_request.leave_count.to_f > @emp_leave_bal1.try(:no_of_leave).to_f
tp @emp_leave_bal1 =  EmployeeLeavBalance.where(employee_id: @employee.id,leav_category_id: @employee_leav_request.leav_category_id,is_active: false).last
@emp_leave_bal1 =  EmployeeLeavBalance.where(employee_id: @employee.id,leav_category_id: @employee_leav_request.leav_category_id,is_active: false).last
exit
deducted_actual_amount = ia.instalment_amount
tp deducted_actual_amount = ia.instalment_amount
n
tp deducted_actual_amount = ia.instalment_amount
a
tp deducted_actual_amount = ia.instalment_amount
deducted_actual_amount = ia.instalment_amount
@instalment_array
@instalment_array.each do |e|
@instalment_array.instalment_amount
@instalment_array
c
tp  deducted_actual_amount = ia.advance_salary.instalment_amount
 deducted_actual_amount = ia.advance_salary.instalment_amount
c
deducted_actual_amount = ia.advance_salary.instalment_amount
tp deducted_actual_amount = ia.advance_salary.instalment_amount
tp deducted_total_actual_amount += deducted_actual_amount
tp deducted_calculated_amount = deducted_actual_amount
deducted_calculated_amount = deducted_actual_amount
tp deducted_actual_amount = ia.advance_salary.instalment_amount
deducted_actual_amount = ia.advance_salary.instalment_amount
deducted_actual_amount
 @instalment_array
c
@instalment_array << i
@instalments = instalments
a
@instalments = a.instalments
@advance_salaries = AdvanceSalary.where(employee_id: @employee.id)
c
@employee.id
ss.employee_id = @employee.id
 @employee = Employee.find(eid)
 @employee = Employee.find_by(id: eid)
c
@employee_week_offs = EmployeeWeekOff.where(employee_id: @employees,date: from_date.to_date..to_date.to_date)
@employee_week_offs = EmployeeWeekOff.where(employee_id: @employees,date: from_date.to_date..to_date.to_date,is_confirm: false)
@employees = Employee.where(company_location_id: location.to_i).pluck(:id)
elsif department == ""
department
location
company
