c
exit
@working_day = working_day.try(:calculated_payable_days).to_f
addable_calculated_amount.to_f
addable_calculated_amount = addable_actual_amount / working_day.day_in_month * working_day.calculated_payable_days
@working_day = working_day.try(:calculated_payable_days).to_f
exit
c
@working_day = working_day.try(:calculated_payable_days).to_f
exit
base_amount = (@total.to_f / working_day.try(:day_in_month).to_f) / pom.company_hrs
overtime_payment.to_f
overtime_payment = working_day.try(:ot_days) * pom.rate.to_f * base_amount.to_
overtime_payment = workingday.try(:ot_days) * pom.rate.to_f * base_amount.to_f
base_amount = (@total.to_f / working_day.try(:day_in_month).to_f) / pom.company_hrs.to_f
 working_day.try(:day_in_month).to_f
 working_day.try(:day_in_month)
pom.company_hrs.to_f
pom.company_hrs
@total = formula_item.sum(:calculated_amount).to_f
@total = formula_item.sum(:calculated_amount)
tp formula_item = SalaryslipComponent.where(salary_component_id: formula_string,salaryslip_id: @salaryslip.id)  
formula_item = SalaryslipComponent.where(salary_component_id: formula_string,salaryslip_id: @salaryslip.id)  
formula_string = pom.base_component.split(',').map {|i| i.to_i}
  end
    # end
      SalaryslipComponent.create(salaryslip_id: @salaryslip.id, actual_amount: 0, calculated_amount: overtime_payment, is_deducted: false, other_component_name: 'Overtime',salary_component_id: @salary_component.id)
      @salary_component = SalaryComponent.find_by(name: "Overtime")
      # f1_actual =  * (formula_item_actual_amount / pom.company_hrs.to_f)
      # formula_item_actual_amount = (@total_actual.to_f / working_day.try(:day_in_month)  * pom.rate.to_f) * (formula_item_actual_amount / calculated_diff.to_f)
      # f1_calculated = (formula_item_calculated_amount / pom.company_hrs.to_f)
      # formula_item_calculated_amount = (@total.to_f / working_day.try(:day_in_month)  * pom.rate.to_f) / calculated_diff.to_f
      overtime_payment = workingday.try(:ot_days) * pom.rate.to_f * base_amount.to_f
      base_amount = (@total.to_f / working_day.try(:day_in_month)) / pom.company_hrs
      byebug
      # total_difference_hrs =  @employee.sum(:difference_hrs)
      # total_overtime_hrs =  @employee.sum(:overtime_hrs)
      # @employee=EmployeeAttendance.where(employee_id: @salaryslip.employee_id,day: @salaryslip.month)
      @total_actual = formula_item.sum(:actual_amount)
      @total = formula_item.sum(:calculated_amount)
      formula_item = SalaryslipComponent.where(salary_component_id: formula_string,salaryslip_id: @salaryslip.id)  
      formula_string = pom.base_component.split(',').map {|i| i.to_i}
@payroll_overtime_masters.try(:each) do |pom|
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true)
exit
 emp_att=EmployeeAttendance.where(employee_id: wor.employee_id,month_name: wor.month_name)
 emp_att=EmployeeAttendance.where(employee_id: wor,month_name: wor.month_name)
exit
@workingdays = Workingday.where(id: work)
work=Workingday.where("ot_days < ?", 0).pluck(:id)
exit
work=Workingday.where("ot_days < ?", 0).pluck(:id)
exit
 work=Workingday.where("ot_days < ?", 0).pluck(:id)
tp @workingdays = Workingday.where(id: work)
@workingdays = Workingday.where(id: work)
exit
work=Workingday.where("ot_days < ?", 0).pluck(:id)
tp @workingdays = Workingday.where(id: work)
@workingdays = Workingday.where(id: work)
final_payable_day = result / @payroll_overtime_masters.company_hrs.to_f
result = total_hrs - calculated_diff.to_f
total_hrs =  wor.payable_day.to_f * @payroll_overtime_masters.company_hrs.to_f
total_hrs =  wor.payable_day * @payroll_overtime_masters.company_hrs.to_f
wor
c
total_hrs = @workingdays.map {|i| i.to_i}
total_hrs.to_i
total_hrs
result = total_hrs - calculated_diff
calculated_diff
result = total_hrs.map {|i| i.to_i} - calculated_diff
result = total_hrs.map {|i| i.to_i} - calculated_diff.map {|i| i.to_i}
result = total_hrs - calculated_diff.to_f
total_hrs = @workingdays.map {|i| i.to_i} * @payroll_overtime_masters.company_hrs.to_f
@workingdays = Workingday.where(month_name: ff.month_name,employee_id: @emp1).pluck(:payable_day)
c
@workingdays.map {|i| i.to_i}
@workingdays.to_f
@workingdays = Workingday.where(month_name: ff.month_name,employee_id: @emp1).pluck(:payable_day)
x
@workingdays.map {|i| i.to_i}
@workingdays.to_f
@workingdays.to_i
@workingdays.to_f
@workingdays = Workingday.where(month_name: ff.month_name,employee_id: x).pluck(:payable_day)
exit
result = total_hrs.to_f - calculated_diff.to_f
result = total_hrs - calculated_diff
result = total_hrs - calculated_diff.to_f
total_hrs
total_hrs.to_f
total_hrs = @workingdays * @payroll_overtime_masters.company_hrs.to_f
@workingdays = Workingday.where(month_name: ff.month_name,employee_id: x).pluck(:payable_day)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
exit
x
tp p=EmployeeAttendance.where(employee_id: x,month_name: b.month_name)
p=EmployeeAttendance.where(employee_id: x,month_name: b.month_name)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
exit
Workingday.where(employee_id: x).update_all(ot_days: calculated_diff.to_f / company_hrs)
exit
company_hrs = @payroll_overtime_masters.company_hrs.to_f
company_hrs = @payroll_overtime_masters.company_hrs
PayrollOvertimeMaster
exit
ff=EmployeeAttendance.where(employee_id: x,month_name: b.month_name).take
@workingdays = Workingday.where(month_name: ff.month_name,employee_id: x).pluck(:payable_day)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
calculated_diff<0
exit
end
a.each do |s| tp p=EmployeeAttendance.where(employee_id: s) d=p.sum(:overtime_hrs).to_f end
a.each do |s| tp p=EmployeeAttendance.where(employee_id: s) end
a.each do |s| p=EmployeeAttendance.where(employee_id: s) end
a.each do |s| tp p=EmployeeAttendance.where(employee_id: s) end
a.each do |s| EmployeeAttendance.where(employee_id: s) end
a.each do |s| p=EmployeeAttendance.where(employee_id: s) end
a.each do |s| s end
a.each do |s| p=EmployeeAttendance.where(employee_id: s) end
a.each do |s| p=EmployeeAttendance.where(employee_id: s)
a.each do |s| p=EmployeeAttendance.where(employee_id: s) d=p.sum(:overtime_hrs).to_f e=p.sum(:difference_hrs).to_f calculated_diff=d-e Workingday.where(employee_id: s).update_all(calculated_payable_days: calculated_diff.to_f) end
a.each do |s| tp p=EmployeeAttendance.where(employee_id: s) d=p.sum(:overtime_hrs).to_f e=p.sum(:difference_hrs).to_f calculated_diff=d-e Workingday.where(employee_id: s).update_all(calculated_payable_days: calculated_diff.to_f) end
a.each do |s| tp p=EmployeeAttendance.where(employee_id: s) end
d=p.sum(:overtime_hrs).to_f
a.each do |s| tp p=EmployeeAttendance.where(employee_id: s) end
a=["1", "2", "3", "4", "5"]
@employees.each do |s| tp p=EmployeeAttendance.where(employee_id: emp) end
@employees.each do |s| p=EmployeeAttendance.where(employee_id: emp) end
@employees.each do |s| df end
@employees.each do |s|
@employees
emp
tp p=EmployeeAttendance.where(employee_id: emp)
p=EmployeeAttendance.where(employee_id: emp)
exit
end
@employees.try(:each) do |emp|
@employees
emp[0]
emp[2]
puts(emp)
tp p=EmployeeAttendance.where(employee_id: emp,month_name: b.month_name)
p=EmployeeAttendance.where(employee_id: emp,month_name: b.month_name)
exit
tp Workingday.where(employee_id: @employees)
tp Workingday.where(id: s.id)
tp Workingday.where(id: s.id,employee_id: emp)
Workingday.where(id: s.id,employee_id: emp)
puts(s)
exit
emp
puts(emp)
tp Workingday.where(employee_id: emp)
tp Workingday.where(id: s.id,employee_id: emp)
\
exit
calculated_diff>0
calculated_diff<0
calculated_diff=d-e
e=p.sum(:difference_hrs).to_f
d=p.sum(:overtime_hrs).to_f
d=p.sum(:overtime_hrs)
tp p=EmployeeAttendance.where(employee_id: emp,month_name: b.month_name)
p=EmployeeAttendance.where(employee_id: emp,month_name: b.month_name)
exit
Workingday.where(employee_id: calculated_diff).update_all(calculated_payable_days: calculated_diff)
Workingday.where(id: s.id,employee_id: calculated_diff).update_all(calculated_payable_days: calculated_diff)
tp Workingday.where(employee_id: calculated_diff)
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
a=total_overtime_hrs.merge(total_difference_hrs) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
a=total_overtime_hrs.(total_difference_hrs) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
a=total_overtime_hrs.merge(total_difference_hrs) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
total_overtime_hrs.merge(total_difference_hrs) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
total_difference_hrs =  @employee.sum(:difference_hrs).to_f
calculated_diff[0]
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
total_difference_hrs =  @employee.sum(:difference_hrs)
total_difference_hrs =  @employee.sum(:difference_hrs).to_i
total_difference_hrs =  @employee.sum(:difference_hrs.to_i)
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs.merge(total_difference_hrs) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
hash1.merge(hash2) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
hash2 = {:total=>{:gold=>20, :dark=>200}, :defensive=>{:gold=>20, :dark=>200}}
hash1 = {:total=>{:gold=>100, :dark=>500}, :defensive=>{:gold=>100, :dark=>500}}
total_overtime_hrs
total_overtime_hrs.to_f.merge(total_difference_hrs.to_f) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
total_overtime_hrs.merge(total_difference_hrs) { |_, l, r| l.merge(r) { |_, x, y| x - y } }
diff=total_overtime_hrs-total_difference_hrs
diff=HashDiff.diff(h1,h2)
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
Hash[*h.first]
Hash[*h.first] 
h = { "a" => 100, "b" => 200 }
hash
hash.all
total_overtime_hrs.difference(total_difference_hrs)
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_h
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
calculated_diff = (total_overtime_hrs - total_difference_hrs)
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
tp @employee=EmployeeAttendance.where(employee_id: 1)
tp @employee=EmployeeAttendance.where(employee_id: 1).group(:employee_id)
@employee=EmployeeAttendance.where(employee_id: 1).group(:employee_id)
calculated_diff = total_overtime_hrs.to_f - total_difference_hrs.to_f
calculated_diff = total_overtime_hrs - total_difference_hrs
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_f
total_difference_hrs =  @employee.sum(:difference_hrs)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: 1)
@employee=EmployeeAttendance.where(employee_id: 1).group(:employee_id)
total_overtime_hrs =  @employee.sum(:overtime_hrs)
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
@employee=EmployeeAttendance.where(employee_id: @employees,month_name: b.month_name).group(:employee_id)
@payroll_overtime_masters = PayrollOvertimeMaster.where(is_active: true,is_payroll: true).take
b=a.last
exit
 calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
 calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_f
c
4379.9ms
calculated_diff = (total_overtime_hrs.to_a - total_difference_hrs.to_a).to_a
