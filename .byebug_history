exit
@emp.each do |e|
@emp = Employee.where(id: @c2)
        @c2 = IssueTrackerMember.where(issue_tracker_group_id: @c1).pluck(:employee_id)
@c1 = IssueTrackerGroup.where(id: @issue_request.issue_tracker_group_id).pluck(:id)
exit
e = e
e
exit
emp.email
emp
exit
@emp = emp
exit
params[:file]
EmployeeBankDetail.import(params[:file])
exit
tp @pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id)
tp @pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id).count
@pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id).count
@pending_employee_leav_requests = EmployeeLeavRequest.where(is_pending: true, is_first_approved: nil, is_first_rejected: nil, is_cancelled: nil, first_reporter_id: current_user.employee_id)
exit
end
formula_item_calculated_amount = formula_item_actual_amount / working_day.try(:day_in_month) * working_day.try(:payable_day).to_f
formula_item_calculated_amount = formula_item_actual_amount / working_day.try(:day_in_month) * working_day.try(:payable_day)
exit
formula_string = @retention.base_component.split(',')
exit
formula_total_actual_amount += formula_item_actual_amount
exit
formula_total_actual_amount += formula_item_actual_amount
formula_item_actual_amount = formula_item.monthly_amount
exit
deducted_actual_amount = (formula_total_actual_amount / 100 * @retention.persent).ceil
