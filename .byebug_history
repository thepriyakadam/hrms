continue
c
 @current_request = OnDutyRequest.find(params[:format])
c
 @status == false
 @status == nil
 @status == false
EmployeeLeavBalance.where(is_active: false)
 @employee_leav_balances
 @employee_leav_balances = EmployeeLeavBalance.where(is_active: false)
@status == false
@status == nil
@status == false
@status == true
 if @status == true
  @status = params[:employee][:is_active]
c
 @employee_leav_balances = EmployeeLeavBalance.where(is_active: false)
@status == false
 @status == true
c
 @employee_leav_balances = EmployeeLeavBalance.where(is_active: false)
 @employee_leav_balances = EmployeeLeavBalance.where(is_active: true)
 @status == false
elsif @status == false
@status = params[:employee][:is_active]
c
@employee_leav_balances
@employee_leav_balances = EmployeeLeavBalance.where(is_active: @status)
@status == true
@status = params[:employee][:is_active]
c
 @status = params[:employee][:is_active]
 @status = params[:is_active]
c
n
manual_employee_code == 0
if manual_employee_code == 0
n
manual_employee_code == 0
 manual_employee_code = spreadsheet.cell(i,'B').to_i
 manual_employee_code = spreadsheet.cell(i,'B')
manual_employee_code == "0"
 if manual_employee_code == "0"
 manual_employee_code = spreadsheet.cell(i,'B').to_i
c
 if manual_employee_code == "0"
c
 manual_employee_code = spreadsheet.cell(i,'B')
 manual_employee_code = spreadsheet.cell(i,'B').to_i
continue
@on_duty_request.is_available?
payroll_period.to
payroll_period.from
start_date.to_date >= payroll_period.from.to_date && end_date.to_date <= payroll_period.to.to_date
payroll_period.nil?
payroll_period = PayrollPeriod.where(status: true).take 
payroll_period
paramsparams[:common][:last_half]
params
params[:flag]
continue
n
nn
n
continue
to_plan.present?
to_plan
to_plan.present?
from_plan.present?
n
continue
n
to_plan
n
from_plan
n
continue
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
from_time
continue
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
employee_plan
continue
employee_plan = @employee_plan.where(from_date: from_date_now.to_date, to_date: to_date_now.to_date)
@employee_plan = EmployeePlan.where(employee_id: current_user.employee_id)
@employee_plan = EmployeePlan.where(employee_id: current_user.employee_id).count
employee_plan = @employee_plan.where(from_date: from_date_now.to_date, to_date: to_date_now.to_date)
employee_plan = @employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
@employee_plan = EmployeePlan.where(employee_id: current_user.employee_id).count
@employee_plan = EmployeePlan.where(employee_id: current_user.employee_id)
from_date_now
to_time_now
from_time_now
continue
employee_plan.where("? BETWEEN 'from_time.to_time + 24*60*60' AND 'to_time.to_time + 24*60*60'", from_time.to_time + 24*60*60)
n
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
continue
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
@employee_plan
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
to_date
from_date
continue
from_time.to_time.utc.strftime("%H:%M")
from_time.utc.strftime("%H:%M")
from_time.to_time
from_time.to-time
from_time
employee_plan.where(from_time:'2000-01-01 16:00:00')
employee_plan.where(from_time: 2000-01-01 16:00:00)
employee_plan.where(from_time: from_time.to_time + 24*60*60)
employee_plan.where(from_time: from_time)
employee_plan.where("? BETWEEN 'from_time.to_time' AND 'to_time.to_time'", from_time.to_time)
employee_plan.where("? BETWEEN 'from_time.to_time + 24*60*60' AND 'to_time.to_time + 24*60*60'", from_time.to_time + 24*60*60)
employee_plan.last.from_time.to_time + 24*60*60
employee_plan.last.from_time
employee_plan.last.from_date.time
employee_plan.last.from_date
employee_plan.where("? BETWEEN "2000-01-01 16:00:00" AND "2000-01-01 16:00:00" ", from_time)
employee_plan.where("? BETWEEN 2000-01-01 16:00:00 AND 2000-01-01 16:00:00 ", from_time)
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
employee_plan
n
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
continue
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
from_time = from_time.to_time
from_time.to_time
from_time
n
from_time
continue
from_time
from_time = employee_plan.where("? BETWEEN from_time AND to_time", from_time.to_time)
from_time = employee_plan.where("? BETWEEN from_time AND to_time", from_time)
n
continue
from_time = employee_plan.where("? BETWEEN from_time AND to_time", from_time)
employee_plan.where("? BETWEEN from_time.to_time AND to_time.to_time, to_time.to_time)
employee_plan.where("? BETWEEN from_time.to_time AND to_time.to_timE, to_time.to_time)
employee_plan.where("? BETWEEN from_time.to_time AND to_time.to_time", to_time.to_time)
employee_plan.where("? BETWEEN from_time AND to_time", to_time.to_time)
from_time = employee_plan.where((from_time: from_time.to_time)..(to_time: to_time.to_time))
from_time = employee_plan.where(from_time: from_time.to_time..to_time: to_time.to_time)
from_time = employee_plan.where(from_time..to_time)
from_time = employee_plan.where(
from_time = employee_plan.where(from_time..to_time
employee_plan.where("? BETWEEN #{from_time} AND #{to_time}", to_time)
employee_plan.where("? BETWEEN from_time AND to_time", to_time)
employee_plan.where("? BETWEEN from_time AND to_time", from_time.to_time)
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
n
continue
to_time
from_time
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
 nplan.where("? BETWEEN from_time AND to_time", from_time)
n
employee_plan
employee_plann
employee_plan
n
continue
employee_plan = @employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date).count
continue
params[:employee_plan][:from_date].to_date.strftime("%d-%m-%Y")
params[:employee_plan][:from_date].to_date.strftime("%m-%d-%Y")
params[:employee_plan][:from_date].to_date.strftime("%m/%d/%Y")
params[:employee_plan][:from_date].to_date
params[:employee_plan][:from_date].strftime("%m/%d/%Y")
params[:employee_plan][:from_date]
continue
n
continue
from_date.strftime("%m/%d/%Y")
from_date
from_date.strftime
from_date.strftime("%d/%m/%Y")
from_date.strftime("%d/%m/%Y)
employee_plan = @employee_plan.where(from_date: from_date, to_date: to_date)
n
continue
empatt[:title]
empatt[:present]
empatt
params
continue
@employee_plan.check_availability(current_user, from_date, to_date, from_time, to_time)
n
continue
n
continue
@employee_plan.check_availability(current_user, from_date, to_date, from_time, to_time)
n
continue
params
n
continue
employee_plan
n
employee_id = params[:employee_id].to_i
continue
employee_plan.id
employee_plan
employee_plan.employee.first_name
employee_plan.employee.full_name
employee_plan[employee_id]
employee_plan.[employee_id]
employee_plan.[:employee_id]
employee_plan = EmployeePlan.where(current_status: "Pending", manager_id: employee_id)
employee_plan
employee_plan.employee_id
employee_plan
employee_plan.employee_id
employee_plan
employee_id
n
continue
params
continue
full_name(e)
continue
full_name(e)
continue
full_name(e)
full_name
continue
params
EmployeePlan.find(plan_id)
@employee_plan = EmployeePlan.find_by_employee_id(plan_id)
plan_id = params[:plan_id]
params
continue
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id).count
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id)
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id
continue
leave_approval.count
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id)
continue
EmployeeLeavRequest.where(is_first_approved: true, is_second_approved: false, is_second_rejected: false, is_cancelled: false).where("second_reporter_id = ?", "#{employee_id}").count
   105:       render :json => leave_approval.present? ? leave_approval.collect{|lal| {:manual_employee_code => lal.employee.manual_employee_code, :employee_last_name => lal.employee.last_name, :employee_first_name => lal.employee.first_name, :leave_requests_id => lal.id, :employee_id => lal.employee.id, :current_status => lal.current_status }} : [].cout
leave_approval = EmployeeLeavRequest.where(is_first_approved: true, is_second_approved: false, is_second_rejected: false, is_cancelled: false).where("second_reporter_id = ?", "#{employee_id}")
n
continue
n
status
n
status
n
status
n
nn
n
