c
employee_resignation
exit
flag1
flag1 = EmployeeResignation.exists?(employee_id: self.employee_id,resign_status: 'FirstApproved')
flag = EmployeeResignation.exists?(employee_id: self.employee_id,resign_status: 'Pending')
exit
flag = EmployeeResignation.exists?(employee_id: self.employee_id,resign_status: 'Pending' || 'FirstApproved' || 'SecondApproved' || 'FinalApproved')
exit
flag = EmployeeResignation.exists?(employee_id: self.employee_id,resign_status: 'Pending' || 'FirstApproved' || 'SecondApproved' || 'FinalApproved')
exit
flag = EmployeeResignation.exists?(employee_id: self.employee_id,resign_status: 'Pending' || 'FirstApproved' || 'SecondApproved' || 'FinalApproved')
exit
flag = EmployeeResignation.where(employee_id: self.employee_id).exist?
flag = EmployeeResignation.exists?(employee_id: self.employee_id)
flag = EmployeeResignation.exists?(employee_id: self.employee_id).where.not(resign_status: 'Pending').where.not(resign_status: 'FirstApproved').where.not(resign_status: 'SecondApproved').where.not(resign_status: 'FinalApproved')
exit
is_avilable?
@employee_resignation.is_available? == true
@employee_resignation.is_available?
exit
tp @employee_resignation.is_available?
@employee_resignation.is_available?
exit
[234].map {|i| i.to_i}.inject{|n|} == 234
[234] == 234
current_user.employee_id
@employee_resignation = EmployeeResignation.where("(resign_status = ?)","Pending").pluck(:employee_id)
exit
@first_approved_resignation_requests = EmployeeResignation.where(is_first_approved: true, is_second_approved: nil,is_second_rejected: nil, is_cancelled: nil,second_reporter_id: current_user.employee_id)
@pending_resignation_requests = EmployeeResignation.where(is_pending: true, is_first_approved: nil,is_first_rejected: nil, is_cancelled: nil,reporting_master_id: current_user.employee_id)
exit
tp @pending_resignation_requests = EmployeeResignation.where(is_pending: true, is_first_approved: nil,is_first_rejected: nil, is_cancelled: nil,reporting_master_id: current_user.employee_id)
