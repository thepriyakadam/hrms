exit
params[:have_retention]
exit
params[:have_retention]
exit
params[:have_retention]
exit
 params[:have_retention]
exit
formula_item = addable_salary_items.where(salary_component_id: f.to_i).take
formula_string.try(:each) do |f|
formula_string = @retention.base_component.split(',')
@retention.have_retention
if @retention.have_retention && addable_total_calculated_amount <= @retention.max_limit.to_f && @employee.joining_detail.have_retention
end
@employee = Employee.find(eid)
employee_ids.each do |eid|
employee_ids = params[:employee_ids]
@retention = RetentionMoney.where(is_active: true,is_persent: "Yes").take
exit
    end
      i += 1
            end
              str.to_s + ',' + c.to_s
            else
              c.to_s
str = if i == 0
components.each do |c|
i = 0
str = ''
components = params[:components]
    end
      i += 1
            end
              str.to_s + ',' + c.to_s
            else
              c.to_s
      str = if i == 0
    components.each do |c|
    i = 0
    str = ''
components = params[:components]
exit
 params[:is_persent]
exit
@company = params[:food_deduction][:company_id]
@location = params[:food_deduction][:company_location_id]
