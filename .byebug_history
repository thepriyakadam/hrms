exit
leave_balance.no_of_leave.to_f
leave_balance.no_of_leave.to_i
leave_balance.no_of_leave
leave_balance
leave_balance = EmployeeLeavBalance.where(employee_id: employee_leav_request.employee_id, leav_category_id: employee_leav_request.leav_category_id).take
employee_leav_request.leave_count.to_f
employee_leav_request
exit
employee_leav_request.leave_count
leave_balance.no_of_leave
tp leave_balance
exit
employee_leav_request.leave_count.to_f
employee_leav_request.leave_count.to_i
employee_leav_request.leave_count
ememployee_leav_request.leave_count
leave_balance.no_of_leave
exit
tp @employees
@employees.count
@employees = Employee.where(id: emp_ids)
@workingdays - @salaryslips
@salaryslips
@workingdays
exit
@workingdays - [6028]
@workingdays - @salaryslips
@salaryslips
@workingdays
exit
params[:employee_ids]
params
exit
start_date.class
start_date
exit
o.id
o = OvertimeMaster.first
exit
employee.employee_leav_requests.methods
employee.employee_leav_requests.mehtods
employee.employee_leav_requests.id
employee.employee_leav_requests
employee.employee_leav_request
employee.employee_leav_requests
employee
employee.save
employee.employee_leav_requests.build(leav_category_id: 1, leave_type: 'Full Day', start_date: start_date,end_date: end_date,date_range: date_range,leave_count: c, reason: 'aaa', current_status: 'Pending', is_pending: true, first_reporter_id: employee.manager_id).id
tp employee.employee_leav_requests.build(leav_category_id: 1, leave_type: 'Full Day', start_date: start_date,end_date: end_date,date_range: date_range,leave_count: c, reason: 'aaa', current_status: 'Pending', is_pending: true, first_reporter_id: employee.manager_id)
employee.employee_leav_requests.build(leav_category_id: 1, leave_type: 'Full Day', start_date: start_date,end_date: end_date,date_range: date_range,leave_count: c, reason: 'aaa', current_status: 'Pending', is_pending: true, first_reporter_id: employee.manager_id)
employee.employee_leav_reuest
employee.employee_leav_reuests
employee
end_date
start_date
exit
Attendance.where(attendance_date: '01/03/2016'.to_date..'31/03/2016'.to_date)
Attendance.where(attendance_date: @date.beginning_of_month..@date.end_of_month)
Attendance.where(attendance_date: @date.beginning_of_month..@date.end_of_month, employee_id: e.id).count
e.id
@date.end_of_month
@date.beginning_of_month
@date
exit
'sdfsd'.to_date
params[:date].to_date.end_of_month.day
params[:date].to_date.end_of_month
params[:date].end_of_month
params[:date]
exit
@location.to_i
@location = params[:salary][:company_location_id]
params[:salary][:company_location_id]
exit
Date.new(params[:year].to_i, Workingday.months[params[:month]])
Workingday.months[m]
m=params[:month]
params[:month]
m = params[:month]
Date.new(2016,1)
Date.new(params[:year].to_i, Workingday.months["#params[:month]"].to_i)
params[:month]
Date.new(params[:year].to_i, Workingday.months["#params[:month]"])
Workingday.months[:January]
Workingday.months
Date.new(params[:year].to_i, Workingday.months["#params[:month]"])
Date.new(params[:year].to_i, 'January')
Date.new(params[:year].to_i, params[:year])
Date.new(params[:year].to_i)
Date.new(31)
Date.new(params[:month])
Date.new(params[:year])
MonthlyExpence.where("strftime('%m/%Y', created_at) = ?", '02/2016')
MonthlyExpence.where("strftime('%B/%Y', created_at) = ?", 'January,2016')
MonthlyExpence.where("strftime('%B/%Y', created_at) = ?", 'January/2016')
MonthlyExpence.where("strftime('%m/%Y', created_at) = ?", '02/2016')
MonthlyExpence.where("strftime('%B/%Y', created_at) = ?", '02/2016')
MonthlyExpence.where("strftime('%B/%Y', created_at) = ?", params[:month]+'/'+params[:year])
'01/01/2016'.to_date.strftime('%B')
'01/01/2016'.to_date.strftime('%b')
'01/01/2016'.to_date.strftime('%M')
'01/01/2016'.to_date.strftime('%m')
MonthlyExpence.where("strftime('%m/%Y', created_at) = ?", params[:month]+'/'+params[:year])
params[:month]
params[:year]
exit
@current_request.id
@employee.id
@employee_leav_requests.count
exit
@employee_leav_balance
exit
@employee_leav_balance
exit
@employee_leav_balance
exit
employee_leav_request.end_date
employee_leav_request.start_date
for i in employee_leav_request.start_date..employee_leav_request.end_date { puts i};
for i in employee_leav_request.start_date..employee_leav_request.end_date; { puts i};
for i in employee_leav_request.start_date..employee_leav_request.end_date; { puts i}
for i in employee_leav_request.start_date..employee_leav_request.end_date { puts i}
for i in employee_leav_request.start_date..employee_leav_request.end_date
employee_leav_request.leave_type
employee_leav_request.class
exit
j
exit
@employee_template.id
@employee_template.save
@employee_template
exit
@employee_template
exit
id
exit
tp Workingday.where(month: 1..3, year: 2016..2016,employee_id: @employee.id)
tp Workingday.where(month: 2..3, year: 2017..2019,employee_id: @employee.id)
tp Workingday.where(month: 2..3, year: 2016..2016,employee_id: @employee.id)
Workingday.where(month: 2..3, year: 2016..2016,employee_id: @employee.id)
Workingday.where(month: 2..3, year: 2016..2016)
Workingday.where(month: 2..3 and year: 2016..2016)
Workingday.where(month: 2..3)
Workingday.where("month = #{2..3}")
Workingday.where("month = 2..3")
Workingday.where("month = ?" 2..3)
Workingday.where("month = ?", 2..3)
Workingday.where("employee_id = ? and month = ?", @employee.id, 2..3)
Workingday.where("employee_id = ? and month = ? and year = ?", @employee.id, 2..3, 2016..2016)
arrear_end_year
arrear_end_month
arrear_start_month
arrear_start_year
arrear_working_days
arrear_working_days.count
exit
@current_salary_components = @current_employee_template.employee_salary_templates
@current_salary_components = @current_employee_template.employee_salary_templates.count
@current_salary_components = @current_employee_template.employee_salary_templates.count unless @current_employee_template.nil?
@current_salary_components = @current_employee_template.employee_salary_templates unless @current_employee_template.nil?
@current_employee_template = EmployeeTemplate.where("employee_id = ? and is_active = ?",params[:employee_id],true).take
params[:id]
params[:employee_id]
exit
nil?
nil
tp @deducted_salary_components
@deducted_salary_components
@salaryslip
params
exit
@month
@salaryslips
exit
@addable_salary_components.count
@addable_salary_components = SalaryslipComponent.where("is_deducted = ? and salaryslip_id = ?",false,@salaryslip.id)
@salaryslip
params
