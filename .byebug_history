exit
tp @on_duty_request
exit
tp @on_duty_request
@on_duty_request.no_of_day = @on_duty_request.no_of_day.to_f + 0.5
 @on_duty_request.no_of_day.to_f + 0.5
@on_duty_request.no_of_day
@on_duty_request.first_half == true || @on_duty_request.last_half == true
@on_duty_request.last_half
tp @on_duty_request
@on_duty_request
@on_duty_request.first_half
c
@on_duty_requests = @employee.on_duty_requests
@employee = Employee.find(@current_request.employee_id)
@current_request = OnDutyRequest.find(params[:format])
exit
tp @on_duty_request
@on_duty_request
exit
tp @on_duty_request
@on_duty_request
@employee.manager_id
@on_duty_request
tp @on_duty_request
@on_duty_request
exit
@on_duty_request.first_reporter_id = @employee.manager_id
@on_duty_request.first_reporter_id = @employee.manager_id.to_i
@on_duty_request.first_reporter_id.to_i = @employee.manager_id.to_i
@on_duty_request.first_reporter_id = @employee.manager_id.to_i
@employee.manager_id
 @on_duty_request.first_reporter_id
V
@on_duty_request.first_reporter_id = @employee.manager_id
@on_duty_request.current_status = "Pending"
@on_duty_request.is_pending = true
@on_duty_request.is_pending
exit
@on_duty_request = OnDutyRequest.new(on_duty_request_params)
c
@circulars = Circular.all
tp @circular = Circular.new(circular_params)
c
tp  @circular = Circular.new(circular_params)
c
tp  @circular = Circular.new(circular_params)
c
@circular = Circular.find(params[:id])
c
@circulars = Circular.all
tp  @circular = Circular.new(circular_params)
 @circular = Circular.new(circular_params)
exit
@company_location == nil
@company
""
@company_location
@company_location == ""
@company == ""
c
finals = (@joining_details - @attendances - @workingday) & @roles
@roles
finals = (@joining_details - @attendances - @workingday)
finals = (@joining_details - @attendances - @workingday) & @roles
@roles = collect_rolewise(current_user)
@joining_details = JoiningDetail.where(cost_center_id: costcenter).pluck(:employee_id)
@attendances = EmployeeAttendance.where(day: date).pluck(:employee_id)
@workingday = Workingday.where(month_name: month,year: year).pluck(:employee_id)
current_user.employee_id
@workingday = Workingday.where(employee_id: current_user.employee_id,month_name: month,year: year)
year = date.strftime("%Y")
month = date.strftime("%B")
exit
count_2 > @monthly_limit
count_1 > @monthly_limit
tp @monthly_limit = @leave_category.monthly_leave
@monthly_limit = @leave_category.monthly_leave
@leave_category = LeavCategory.find_by(id: self.leav_category_id)
@leave_category = LeavCategory.find_by(id: self.leave_category_id)
count_2
count_1
exit
tp ParticularLeaveRecord.where("employee_id = ? AND strftime('%m/%Y', leave_date) = ? AND leav_category_id = ?" ,  self.employee_id,i.strftime('%m/%y'),self.leav_category_id)
ParticularLeaveRecord.where("employee_id = ? AND strftime('%m/%Y', leave_date) = ? AND leav_category_id = ?" ,  self.employee_id,i.strftime('%m/%y'),self.leav_category_id)
ParticularLeaveRecord.exists?("employee_id = ? AND strftime('%m/%Y', leave_date) = ? AND leav_category_id = ?" ,  self.employee_id,i.strftime('%m/%y'),self.leav_category_id)
exit
count_2
 count_1
exit
 count_2
count_1
exit
count_1
V
ParticularLeaveRecord.exists?(employee_id: self.employee_id,leave_date: i)
start_month == end_month
self.start_date.to_datetime..self.end_date.to_datetime
exit
ParticularLeaveRecord.exists?(employee_id: self.employee_id)
start_month == end_month
tp ParticularLeaveRecord.where(employee_id: 4605,leave_date: "2016-09-13 00:00:00")
ParticularLeaveRecord.where(employee_id: 4605,leave_date: "2016-09-13 00:00:00")
ParticularLeaveRecord.exists?(employee_id: self.employee_id,leave_date: "2016-09-13 00:00:00")
ParticularLeaveRecord.exists?(employee_id: self.employee_id,leave_date: "2016-09-13")
ParticularLeaveRecord.exists?(employee_id: self.employee_id,leave_date: i)
start_month == end_month
ParticularLeaveRecord.exists?(employee_id: self.employee_id,leave_date: i.to_datetime)
ParticularLeaveRecord.exists?(employee_id: self.employee_id,leave_date: i)
self.start_date.to_date..self.end_date.to_date
self.start_date.to_date
end_month = self.end_date.strftime("%B")
start_month = self.start_date.strftime("%B")
count_2
count_1
c
end_month = self.end_date.strftime("%B")
start_month = self.start_date.strftime("%B")
count_2
 count_1
exit
@leav_category.save
@leav_category = LeavCategory.new(leav_category_params)
exit
c
@salaryslip.year
@salaryslip.month
year = @date.strftime("%Y")
month = @date.strftime("%B")
@date = plr.leave_date
exit
@employee_leav_balance.each
tp @employee_leav_balance = EmployeeLeavBalance.find_by(employee_id: @employee.id)
tp @salaryslip = Salaryslip.last
@salaryslip = Salaryslip.last
exit
@employee_leav_balance = EmployeeLeavBalance.find_by_employee_id(@employee.id)
@salaryslip = Salaryslip.last
