exit
@method
@method = GoalRating.import(params[:file],employee,goal_bunch)
@method 
c
tp a = GoalRating.where(appraisee_id: emp,period_id: period_id)
a.goal_weightage
a = GoalRating.where(appraisee_id: emp,period_id: period_id)
weightage_sum = sum(:goal_weightage)
c
spreadsheet.cell(i,'H')
Weightage
weightage_sum = sum(Weightage)
weightage_sum = sum(:Weightage)
weightage = spreadsheet.cell(i,'H')
sum(a)
sum(a).to_i
sum(a)
sum(:a)
a = spreadsheet.cell(i,'H')
sum(:spreadsheet.cell(i,'H'))
spreadsheet.cell(i,'H')
weightage_sum = sum(:goal_weightage)
weightage_sum = sum(:weightage)
c
 weightage_sum = sum(:goal_weightage)
c
@am == false
@am 
c
weightage_sum1
weightage_sum
@weightage_sum
exit
 @weightage_sum
c
@weightage_sum 
c
weightage_sum
params
c
params
file
exit
c
period_name = spreadsheet.cell(i,'C')
emp = Employee.find_by(manual_employee_code: employee_code)
employee_code = spreadsheet.cell(i,'B').to_i
c
 attribute_master_id = attribute.id
 attribute
 attribute_master = attribute.update(status: true)
a = attribute_master
 attribute_master = attribute.update(status: true)
 attribute_master_id = attribute_master.id
 attribute_master = attribute.update(status: true)
attribute_master = attribute.update(status: true)
attribute_master_id = attribute_master.id
attribute
attribute_master = attribute.update(status: true)
attribute
attribute.nil?
if attribute.nil?
attribute = AttributeMaster.find_by(name: perspective)
c
tp attribute_master 
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure)
attribute_master_id = attribute_master.id
attribute_master = AttributeMaster.create(id: new_id,code: new_code,name: perspective,status: true)
new_id = last_attribute.id.to_i + 1
 new_code = last_code.to_i + 1
last_code = last_attribute.code
last_attribute = AttributeMaster.last
perspective = spreadsheet.cell(i,'E')
c
attribute_master = AttributeMaster.create(id: a,code: new_code,name: perspective,status: true)
a = last_attribute.id + 1
attribute_master = AttributeMaster.create(id: last_attibute.id.to_i + 1,code: new_code,name: perspective,status: true)
last_attribute.id
last_attribute = AttributeMaster.last
attribute_master.save
attribute_master = AttributeMaster.create(code: new_code,name: perspective,status: true)
attribute_master_id
                  target: target,aligned: align_to_supervisor,period_id: period.id,goal_type: type,goal_setter_id: emp.id,
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure,
                  appraisee_id: emp.id,appraiser_id: emp.manager_id)
                  target: target,aligned: align_to_supervisor,period_id: period.id,goal_type: type,goal_setter_id: emp.id,
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure,
                  appraisee_id: emp.id,appraiser_id: emp.manager_id)
                  target: target,aligned: align_to_supervisor,period_id: period.id,goal_type: type,goal_setter_id: emp.id,
GoalRating.create(goal_bunch_id: goal_bunch.id,attribute_master_id: attribute_master_id,goal_weightage: weightage,goal_measure: measure,
attribute_master_id = attribute_master.id
tp attribute_master = AttributeMaster.create(code: new_code,name: perspective,status: true)
attribute_master = AttributeMaster.create(code: new_code,name: perspective,status: true)
new_code = last_code.to_i + 1
last_code = last_attribute.code
last_attribute = AttributeMaster.last
perspective = spreadsheet.cell(i,'E')
 attribute_master == nil
attribute_master = AttributeMaster.find_by(name: perspective,status: true)
c
    @sum = SalaryReport.create_sum(@reports)
joining_array
 emp_user_array
emp_array
final_emp_array
@employees = Employee.where(id: final_emp_array)
 @reports = []
@reports
c
@location = params[:food_deduction][:company_location_id]
@location = params[:employee][:company_location_id]
@location = params[:salaryslip][:company_location_id]
c
@location = params[:salaryslip][:company_location_id]
@company = params[:salaryslip][:company_id]
end_date = params[:salaryslip][:end_date].to_date
start_date = params[:salaryslip][:start_date].to_date
c
@leav_category_id
exit
c
goal_perspective = GoalPerspective.find_by(name: perspective)
perspective = spreadsheet.cell(i,'E')
perspective
goal_perspective = GoalPerspective.find_by(name: perspective)
type == "Goal"
type
tp  goal_bunch = GoalBunch.where(period_id: period_id,employee_id: employee_id).take
 goal_bunch = GoalBunch.where(period_id: period_id,employee_id: employee_id).take
 @goal_bunch = GoalBunch.where("employee_id = ? AND period_id = ?" , employee_id ,period_id)
employee_id = emp.id
emp = Employee.find_by(manual_employee_code: employee_code)
 @goal_bunch = GoalBunch.where("employee_id = ? AND period_id = ?" , employee_id ,period_id)
exit
goal_rating.update(appraisee_comment: self_comment,appraisee_rating_id: self_rating)
goal_rating_id.to_i == goal_rating.id
goal_rating_id.to_i
 goal_rating.id
goal_rating_id
goal_rating_id == goal_rating.id
 goal_rating.id
tp  goal_rating = GoalRating.find_by(id: goal_rating_id)
 goal_rating = GoalRating.find_by(id: goal_rating_id)
c
perspective = spreadsheet.cell(i,'E')
tp attribute_master = AttributeMaster.create(name: perspective)
attribute_master = AttributeMaster.create(name: perspective)
attribute_master == nil
perspective = spreadsheet.cell(i,'E')
perspective
attribute_master = AttributeMaster.find_by(name: perspective)
c
 type == "Attribute"
type == "Goal"
c
  @goal_bunch = GoalBunch.where("employee_id = ? AND period_id = ?" , employee_id ,9)
tp  @goal_bunch = GoalBunch.where("employee_id = ? AND period_id = ?" , employee_id ,9)
@goal_bunch == nil
@goal_bunch == false
tp  @goal_bunch = GoalBunch.where("employee_id = ? AND period_id = ?" , employee_id ,period_id)
tp  @goal_bunch = GoalBunch.where(employee_id: employee_id && period_id: period_id)
tp  @goal_bunch = GoalBunch.where(employee_id: employee_id) && GoalBunch.where(period_id: period_id)
 @goal_bunch = GoalBunch.where(employee_id: employee_id) && GoalBunch.where(period_id: period_id)
period_id = period.id
period == nil
period.id
period
period_id
employee_id
 @goal_bunch = GoalBunch.where(employee_id: employee_id) && GoalBunch.where(period_id: period_id)
period_id = period_id
employee_id = emp.id
align_to_supervisor = spreadsheet.cell(i,'I')
weightage = spreadsheet.cell(i,'H')
target = spreadsheet.cell(i,'G')
measure = spreadsheet.cell(i,'F')
perspective = spreadsheet.cell(i,'E')
type = spreadsheet.cell(i,'D')
period = Period.find_by(name: period_name)
tp period = Period.find_by(name: period_name)
period = Period.find_by(name: period_name)
period_name = spreadsheet.cell(i,'C')
tp emp = Employee.find_by(manual_employee_code: employee_code)
emp = Employee.find_by(manual_employee_code: employee_code)
tp emp = Employee.find_by(manual_employee_code: employee_code)
emp = Employee.find_by(manual_employee_code: employee_code)
c
period = Period.find_by(name: period_name)
GoalRating.import(params[:file])
tp employee = Employee.find(params[:emp_id])
employee = Employee.find(params[:emp_id])
tp goal_bunch = GoalBunch.find(params[:goal_bunch_id])
tpgoal_bunch = GoalBunch.find(params[:goal_bunch_id])
goal_bunch = GoalBunch.find(params[:goal_bunch_id])
c
GoalPerspective.find_by_name("perspective")
GoalPerspective.find_by_name(perspective)
perspective
goal_perspective = GoalPerspective.find_by(name: perspective)
c
type 
exit
@workingday.each do |w|
tp @workingday = Workingday.where(date: @from..@to,employee_id: workingday.employee_id)
@workingday = Workingday.where(date: @from..@to,employee_id: workingday.employee_id)
c
tp @workingdays = Workingday.where(date: @from..@to,employee_id: 67).group(:employee_id).first(7)
tp @workingdays = Workingday.where(date: @from..@to).group(:employee_id).first(7)
tp @workingdays = Workingday.where(date: @from..@to).group(:employee_id).first(3)
tp @workingdays = Workingday.where(date: @from..@to).group(:employee_id)
 @workingdays = Workingday.where(date: @from..@to).group(:employee_id)
c
@workingdays = Workingday.where(date: @from..@to)
@workingdays = Workingday.where(from: @from,to: @to)
@to = to.to_date
@from = from.to_date
 to = params[:employee][:to]
from = params[:employee][:from]
