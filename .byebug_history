exit
s
s[1]
s[0]
s.first
d.first
a=s
exi
s
exit
a=s.employee
a=s.employee.all
a=s.employee
exit
a=s.employee
@salaryslips = Salaryslip.where(month: @month.to_s, year: @year.to_s).count
@salaryslips = Salaryslip.where(month: @month.to_s, year: @year.to_s)
exit
@employee_leav_request.employee.manager_2_id
@employee_leav_request.employee.manager_id
@employee_leav_request.employee
exit
@emp = Employee.where(company_location_id: current_user.company_location_id).pluck(:id)
exit
@emp = Employee.where(company_location_id: current_user.company_location_id).pluck(:employee_id)
exit
@emp_contribution.empty?
@emp_contribution.emplty?
tp @emp_contribution = EmployerContribution.where(employee_id: @salaryslips_1,date: @salaryslips_1_date)
@emp_contribution.nil?
@emp_contribution = EmployerContribution.where(employee_id: @salaryslips_1,date: @salaryslips_1_date)
@salaryslips_1_date = Salaryslip.where(month: @month.to_s, year: @year.to_s).pluck(:month_year)
@salaryslips_1 = Salaryslip.where(month: @month.to_s, year: @year.to_s).pluck(:employee_id)
@salaryslips = Salaryslip.where(month: @month.to_s, year: @year.to_s).last
@salaryslips = Salaryslip.where(month: @month.to_s, year: @year.to_s).;ast
@year = params[:year]
@month = params[:month]
exit
params[:year]
\
exit
deducted_actual_amount
exit
@master_esic.esic && addable_total_calculated_amount <= @master_esic.max_limit && @employee.joining_detail.have_esic
exit
addable_total_calculated_amount.to_f
addable_total_calculated_amount
@master_esic.esic && addable_total_calculated_amount <= @master_esic.max_limit && @employee.joining_detail.have_esic
@master_esic.nil?
@master_esic = EsicMaster.where(is_active: true).take
\
exit
@master_esic = EsicMaster.where(is_active: true).take
