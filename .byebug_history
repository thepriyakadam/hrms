c
@employee_week_offs = EmployeeWeekOff.where(date: @from_date.to_date..@to_date.to_date)
@employee_week_offs = EmployeeWeekOff.where(date: @from_date.to_date..@to_date.to_date,employee_id: @employees)
@employee_week_offs = EmployeeWeekOff.where(day: @from_date.to_date..@to_date.to_date,employee_id: @employees)
department == ""
current_user.class == Member
department = params[:employee][:department_id]
location = params[:employee][:company_location_id]
company = params[:employee][:company_id]
@to_date = params[:employee][:to_date]
@from_date = params[:employee][:from_date]
c
@emp_atten.employee_leav_request_id == nil && @emp_atten.on_duty_request_id == nil
@emp_atten = EmployeeAttendance.where(employee_id: @employee_week_off.employee_id,day: @date).take
@employee_week_off.is_present(@date,@employee_week_off.employee_id)
exit
@employee_week_off = EmployeeWeekOff.find_by(id: employee_week_off_id)
day = @date.strftime('%a')
@date = date.to_date
employee_week_off_id = params[:employee_week_off_id]
c
@employee_week_offs = EmployeeWeekOff.where(date: from_date..to_date,employee_id: employee)
employee = params[:employee_week_off][:employee_id]
to_date = params[:employee_week_off][:to_date]
from_date = params[:employee_week_off][:from_date]
from_date = params[:from_date]
c
exit
@vacancy_master.reporting_master_id
emp=Employee.where(id: @vacancy_master.reporting_master_id).take
        # byebug
c
exit
TWILIO_CONFIG['sid']
client = Twilio::REST::Client.new(TWILIO_CONFIG['sid'], TWILIO_CONFIG['token'])
exit
leave_count
c
leave_count
exit
leave_count
c
 elb
@salaryslip
leave_count
