c
@visitor_detail.save
c
@visitor_detail.save
tp   @visitor_detail = VisitorDetail.new(visitor_detail_params)
c
 respond_to do |format|
 @visitor_detail.save
 @visitor_detail = VisitorDetail.new(visitor_detail_params)
c
@overtime_salaries = OvertimeSalary.where("DATE_FORMAT('%m/%Y', ot_date) = ?", date.strftime('%m/%Y'))
params[:salary][:company_location_id] == '' || params[:salary][:company_location_id].nil?
date = Date.new(@year.to_i, Workingday.months[@month])
 @location = params[:salary][:company_location_id]
 @year = params[:salary][:year]
@month = params[:salary][:month]
c
 @food_deductions = FoodDeduction.where("DATE_FORMAT('%m/%Y', food_date) = ?", DATE_FORMAt('%m/%Y')).where(employee_id: @employees)
 @food_deductions = FoodDeduction.where("DATE_FORMAT('%m/%Y', food_date) = ?", date_format('%m/%Y')).where(employee_id: @employees)
c
@food_deductions = FoodDeduction.where("DATE_FORMAT('%m/%Y', food_date) = ?", date.strftime('%m/%Y')).where(employee_id: @employees)
@food_deductions = FoodDeduction.where("DATE_FORMAT('%m/%Y', food_date) = ?", date.strftime('%m/%Y')
@food_deductions = FoodDeduction.where("DATE_FORMAT('%m/%Y', food_date) = ?", date.strftime('%m/%Y'))
@food_deductions = FoodDeduction.where("DATE_FORMAT('%m/%Y', food_date) = ?", date.strftime('%m/%Y')).where(employee_id: @employees)
tp @employees = Employee.where(company_id: @company.to_i)
@employees = Employee.where(company_id: @company.to_i)
 date = Date.new(@year.to_i,Workingday.months[@month])
 @location = params[:food_deduction][:company_location_id]
 @company = params[:food_deduction][:company_id]
 @year = params[:food_deduction][:year]
 @month = params[:food_deduction][:month]
c
@salaryslip_components = SalaryslipComponent.where(salaryslip_id: @salaryslips1,other_component_name: "Advance")
  @salaryslips1 = Salaryslip.where(month: @month , year: @year)
c
@salaryslips = Salaryslip.where(id: @salaryslip_components)
 @salaryslip_components = SalaryslipComponent.where(salaryslip_id: @salaryslips1,other_component_name: "Advance")
 @salaryslips1 = Salaryslip.where('month = ? and year = ?', @month, @year)
c
  @location = params[:salary_slip_ledger][:company_location_id]
@location = params[:salary_slip_ledger][:company_location_id]
@company = params[:salary_slip_ledger][:company_id]
 @year = params[:salary_slip_ledger][:year]
 @month = params[:salary_slip_ledger][:month]
c
@salaryslips = Salaryslip.where(id: @salaryslip_components)
tp @salaryslip_components = SalaryslipComponent.where(salaryslip_id: @salaryslips1,other_component_name: "Society")
@salaryslip_components = SalaryslipComponent.where(salaryslip_id: @salaryslips1,other_component_name: "Society")
tp  @salaryslips1 = Salaryslip.where('month = ? and year = ?', @month, @year)
 @salaryslips1 = Salaryslip.where('month = ? and year = ?', @month, @year)
   @location = params[:food_deduction][:company_location_id]
 @company = params[:food_deduction][:company_id]
 @year = params[:food_deduction][:year]
 @month = params[:food_deduction][:month]
c
tp  @employees = Employee.where(company_id: @company.to_i)
 @employees = Employee.where(company_id: @company.to_i)
 @company = params[:food_deduction][:company_id]
 @company = params[:food_deduction][:company_i
c
@employees = Employee.where(company_id: @company)
@employees = Employee.where(company_id: @company.to_i)
  date = Date.new(@year.to_i,Workingday.months[@month])
 @year = params[:food_deduction][:year]
@month = params[:food_deduction][:month]
c
 @salaryslips = Salaryslip.where(employee_id: params[:employee_id], month_year: @start_date.to_date..@end_date.to_date)
c
 @salaryslips = Salaryslip.where(employee_id: params[:employee_id], month_year: @start_date.to_date..@end_date.to_date)
@employee = params[:employee_id]
@end_date = params[:end_date].to_date
@start_date = params[:start_date].to_date
c
@start_date.to_date
tp @salaryslips = Salaryslip.where(employee_id: params[:employee_id], month_year: @start_date.to_date..@end_date.to_date)
@salaryslips = Salaryslip.where(employee_id: params[:employee_id], month_year: @start_date.to_date..@end_date.to_date)
@employee = params[:employee_id]
@end_date = params[:end_date].to_date
@start_date = params[:start_date].to_date
exit
@emp_leave_bal1.try(:no_of_leave).to_f
@employee_leav_request.leave_count.to_f
@employee_leav_request.leave_count.to_f > @emp_leave_bal1.try(:no_of_leave).to_f
tp @emp_leave_bal1 =  EmployeeLeavBalance.where(employee_id: @employee.id,leav_category_id: @employee_leav_request.leav_category_id,is_active: false).last
@emp_leave_bal1 =  EmployeeLeavBalance.where(employee_id: @employee.id,leav_category_id: @employee_leav_request.leav_category_id,is_active: false).last
exit
deducted_actual_amount = ia.instalment_amount
tp deducted_actual_amount = ia.instalment_amount
n
tp deducted_actual_amount = ia.instalment_amount
a
tp deducted_actual_amount = ia.instalment_amount
deducted_actual_amount = ia.instalment_amount
@instalment_array
@instalment_array.each do |e|
@instalment_array.instalment_amount
@instalment_array
c
tp  deducted_actual_amount = ia.advance_salary.instalment_amount
 deducted_actual_amount = ia.advance_salary.instalment_amount
c
deducted_actual_amount = ia.advance_salary.instalment_amount
tp deducted_actual_amount = ia.advance_salary.instalment_amount
tp deducted_total_actual_amount += deducted_actual_amount
tp deducted_calculated_amount = deducted_actual_amount
deducted_calculated_amount = deducted_actual_amount
tp deducted_actual_amount = ia.advance_salary.instalment_amount
deducted_actual_amount = ia.advance_salary.instalment_amount
deducted_actual_amount
 @instalment_array
c
@instalment_array << i
@instalments = instalments
a
@instalments = a.instalments
@advance_salaries = AdvanceSalary.where(employee_id: @employee.id)
c
@employee.id
ss.employee_id = @employee.id
 @employee = Employee.find(eid)
 @employee = Employee.find_by(id: eid)
c
@employee_week_offs = EmployeeWeekOff.where(employee_id: @employees,date: from_date.to_date..to_date.to_date)
@employee_week_offs = EmployeeWeekOff.where(employee_id: @employees,date: from_date.to_date..to_date.to_date,is_confirm: false)
@employees = Employee.where(company_location_id: location.to_i).pluck(:id)
elsif department == ""
department
location
company
