continue
employee_plan.where("? BETWEEN 'from_time.to_time + 24*60*60' AND 'to_time.to_time + 24*60*60'", from_time.to_time + 24*60*60)
n
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
continue
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
@employee_plan
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
to_date
from_date
continue
from_time.to_time.utc.strftime("%H:%M")
from_time.utc.strftime("%H:%M")
from_time.to_time
from_time.to-time
from_time
employee_plan.where(from_time:'2000-01-01 16:00:00')
employee_plan.where(from_time: 2000-01-01 16:00:00)
employee_plan.where(from_time: from_time.to_time + 24*60*60)
employee_plan.where(from_time: from_time)
employee_plan.where("? BETWEEN 'from_time.to_time' AND 'to_time.to_time'", from_time.to_time)
employee_plan.where("? BETWEEN 'from_time.to_time + 24*60*60' AND 'to_time.to_time + 24*60*60'", from_time.to_time + 24*60*60)
employee_plan.last.from_time.to_time + 24*60*60
employee_plan.last.from_time
employee_plan.last.from_date.time
employee_plan.last.from_date
employee_plan.where("? BETWEEN "2000-01-01 16:00:00" AND "2000-01-01 16:00:00" ", from_time)
employee_plan.where("? BETWEEN 2000-01-01 16:00:00 AND 2000-01-01 16:00:00 ", from_time)
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
employee_plan
n
@employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date)
continue
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
from_time = from_time.to_time
from_time.to_time
from_time
n
from_time
continue
from_time
from_time = employee_plan.where("? BETWEEN from_time AND to_time", from_time.to_time)
from_time = employee_plan.where("? BETWEEN from_time AND to_time", from_time)
n
continue
from_time = employee_plan.where("? BETWEEN from_time AND to_time", from_time)
employee_plan.where("? BETWEEN from_time.to_time AND to_time.to_time, to_time.to_time)
employee_plan.where("? BETWEEN from_time.to_time AND to_time.to_timE, to_time.to_time)
employee_plan.where("? BETWEEN from_time.to_time AND to_time.to_time", to_time.to_time)
employee_plan.where("? BETWEEN from_time AND to_time", to_time.to_time)
from_time = employee_plan.where((from_time: from_time.to_time)..(to_time: to_time.to_time))
from_time = employee_plan.where(from_time: from_time.to_time..to_time: to_time.to_time)
from_time = employee_plan.where(from_time..to_time)
from_time = employee_plan.where(
from_time = employee_plan.where(from_time..to_time
employee_plan.where("? BETWEEN #{from_time} AND #{to_time}", to_time)
employee_plan.where("? BETWEEN from_time AND to_time", to_time)
employee_plan.where("? BETWEEN from_time AND to_time", from_time.to_time)
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
n
continue
to_time
from_time
employee_plan.where("? BETWEEN from_time AND to_time", from_time)
 nplan.where("? BETWEEN from_time AND to_time", from_time)
n
employee_plan
employee_plann
employee_plan
n
continue
employee_plan = @employee_plan.where(from_date: from_date.to_date, to_date: to_date.to_date).count
continue
params[:employee_plan][:from_date].to_date.strftime("%d-%m-%Y")
params[:employee_plan][:from_date].to_date.strftime("%m-%d-%Y")
params[:employee_plan][:from_date].to_date.strftime("%m/%d/%Y")
params[:employee_plan][:from_date].to_date
params[:employee_plan][:from_date].strftime("%m/%d/%Y")
params[:employee_plan][:from_date]
continue
n
continue
from_date.strftime("%m/%d/%Y")
from_date
from_date.strftime
from_date.strftime("%d/%m/%Y")
from_date.strftime("%d/%m/%Y)
employee_plan = @employee_plan.where(from_date: from_date, to_date: to_date)
n
continue
empatt[:title]
empatt[:present]
empatt
params
continue
@employee_plan.check_availability(current_user, from_date, to_date, from_time, to_time)
n
continue
n
continue
@employee_plan.check_availability(current_user, from_date, to_date, from_time, to_time)
n
continue
params
n
continue
employee_plan
n
employee_id = params[:employee_id].to_i
continue
employee_plan.id
employee_plan
employee_plan.employee.first_name
employee_plan.employee.full_name
employee_plan[employee_id]
employee_plan.[employee_id]
employee_plan.[:employee_id]
employee_plan = EmployeePlan.where(current_status: "Pending", manager_id: employee_id)
employee_plan
employee_plan.employee_id
employee_plan
employee_plan.employee_id
employee_plan
employee_id
n
continue
params
continue
full_name(e)
continue
full_name(e)
continue
full_name(e)
full_name
continue
params
EmployeePlan.find(plan_id)
@employee_plan = EmployeePlan.find_by_employee_id(plan_id)
plan_id = params[:plan_id]
params
continue
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id).count
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id)
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id
continue
leave_approval.count
leave_approval  = EmployeeLeavRequest.where(current_status: "Pending", first_reporter_id: employee_id)
continue
EmployeeLeavRequest.where(is_first_approved: true, is_second_approved: false, is_second_rejected: false, is_cancelled: false).where("second_reporter_id = ?", "#{employee_id}").count
   105:       render :json => leave_approval.present? ? leave_approval.collect{|lal| {:manual_employee_code => lal.employee.manual_employee_code, :employee_last_name => lal.employee.last_name, :employee_first_name => lal.employee.first_name, :leave_requests_id => lal.id, :employee_id => lal.employee.id, :current_status => lal.current_status }} : [].cout
leave_approval = EmployeeLeavRequest.where(is_first_approved: true, is_second_approved: false, is_second_rejected: false, is_cancelled: false).where("second_reporter_id = ?", "#{employee_id}")
n
continue
n
status
n
status
n
status
n
nn
n
continue
n
@user
n
params
continue
contact_details.last.employee.joining_detail.employee_designation.try(:name)
contact_details = ContactDetail.where(status: true)
continue
contact_details.last.employee.joining_detail.employee_designation.try(:name) 
contact_details.last.contact_detail.employee.joining_detail.employee_designation.try(:name) 
contact_details.last.full_name(contact_detail.employee)
contact_details.last.employee.full_name
contact_details.last.employee.full_name(contact_detail.employee)
contact_details.last.employee.name
contact_details.last
contact_details
contact_details.last.full_name(contact_detail.employee)
contact_details.last.contact_details = ContactDetail.where(status: true)
contact_details = ContactDetail.where(status: true)
continue
params[:format]
params[format]
params
continue
params
continue
params
c
params[:format]
params
c
@policy_detail = PolicyDetail.find(params[:format])
q
code
values
code
n
continue
@section_code.each do |code, values| end
@section_code.each do |code, values|
n
continue
code
n
continue
section_code[section.code]
section_code[section.code].count
section_code[80C]
section_code[section.code]
continue
section_code[section.code]
continue
sections["80C"]
sections["ASyntaxError Exception: (byebug):1: syntax error, unexpected tCONSTANT, expecting ']'"]
sections['80C']
sections[:80C]
sections[80C]
sections
sections["80C"]
sections[:code]
sections
sections[80CC]
sections[:code]
sections
sections['80C']
sections[80C]
continue
sections[:code] = @investment_declarations_c = InvestmentDeclaration.select(InvestmentDeclaration.arel_table[Arel.star]).where(Section.arel_table[:code].eq(section.code).and(InvestmentDeclaration.arel_table[:employee_id].eq(@employee))).joins(InvestmentDeclaration.arel_table.join(InvestmentHead.arel_table).on(InvestmentDeclaration.arel_table[:investment_head_id].eq(InvestmentHead.arel_table[:id])).join_sources).joins(InvestmentDeclaration.arel_table.join(Section.arel_table).on(Section.arel_table[:id].eq(InvestmentHead.arel_table[:section_id])).join_sources)
section.code
section
continue
section
sections[:code] = @investment_declarations_c = InvestmentDeclaration.select(InvestmentDeclaration.arel_table[Arel.star]).where(Section.arel_table[:code].eq('section.code').and(InvestmentDeclaration.arel_table[:employee_id].eq(@employee))).joins(InvestmentDeclaration.arel_table.join(InvestmentHead.arel_table).on(InvestmentDeclaration.arel_table[:investment_head_id].eq(InvestmentHead.arel_table[:id])).join_sources).joins(InvestmentDeclaration.arel_table.join(Section.arel_table).on(Section.arel_table[:id].eq(InvestmentHead.arel_table[:section_id])).join_sources)
sections[:code]
continue
sections[:code] = @investment_declarations_c = InvestmentDeclaration.select(InvestmentDeclaration.arel_table[Arel.star]).where(Section.arel_table[:code].eq(section.code).and(InvestmentDeclaration.arel_table[:employee_id].eq(@employee))).joins(InvestmentDeclaration.arel_table.join(InvestmentHead.arel_table).on(InvestmentDeclaration.arel_table[:investment_head_id].eq(InvestmentHead.arel_table[:id])).join_sources).joins(InvestmentDeclaration.arel_table.join(Section.arel_table).on(Section.arel_table[:id].eq(InvestmentHead.arel_table[:section_id])).join_sources)
sections[:code] = @investment_declarations_c = InvestmentDeclaration.select(InvestmentDeclaration.arel_table[Arel.star]).where(Section.arel_table[:code].eq('section.code').and(InvestmentDeclaration.arel_table[:employee_id].eq(@employee))).joins(InvestmentDeclaration.arel_table.join(InvestmentHead.arel_table).on(InvestmentDeclaration.arel_table[:investment_head_id].eq(InvestmentHead.arel_table[:id])).join_sources).joins(InvestmentDeclaration.arel_table.join(Section.arel_table).on(Section.arel_table[:id].eq(InvestmentHead.arel_table[:section_id])).join_sources)
sections = {}
sections[:code] = @investment_declarations_c = InvestmentDeclaration.select(InvestmentDeclaration.arel_table[Arel.star]).where(Section.arel_table[:code].eq('section.code').and(InvestmentDeclaration.arel_table[:employee_id].eq(@employee))).joins(InvestmentDeclaration.arel_table.join(InvestmentHead.arel_table).on(InvestmentDeclaration.arel_table[:investment_head_id].eq
n
continue
@emp.present?
 @emp = InvestmentDeclaration.where(employee_id: 100000)
@emp.present?
continue
@emp.present?
@emp
continue
 @employees = Employee.all.count
 @employees = Employee.where.not(id: InvestmentDeclaration.select(:employee_id)).count
continue
Employee.where('manager_id = ? OR manager_2_id = ?', manager_id, manager_id)
n
