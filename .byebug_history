exit
@last = @emp_master_code.last_range.succ
@emp_master_code = EmployeeCodeMaster.where(id: @emp1,is_active: true).take
 @emp1= params[:id]
1430 @emp1= params[:id]
            sa.save!
            sa.employee_template_id = current_template.id
            sa.salaryslip_id = @salaryslip.id
          @salaryslip_component_array.each do |sa|
          SlipInformation.create_salaryslip_information(@salaryslip, @employee, working_day)
          @salaryslip = Salaryslip.last
          end
            ss.save!
            ss.calculated_net_salary = addable_total_calculated_amount - deducted_total_calculated_amount
            ss.calculated_total_deduction = deducted_total_calculated_amount
            ss.calculated_gross_salary = addable_total_calculated_amount
            ss.month_year = "01 #{@month} #{@year}".to_date
            ss.year = @year
            ss.month = @month
            ss.salary_template_id = @template_id
            ss.actual_net_salary = addable_total_actual_amount - deducted_total_actual_amount
            ss.actual_total_deduction = deducted_total_actual_amount
            ss.actual_gross_salary = addable_total_actual_amount
            ss.employee_template_id = current_template.id
            ss.workingday_id = working_day.id
            ss.employee_id = @employee.id
Salaryslip.new do |ss|
ss.workingday_id = working_day.id
ss.employee_id = @employee.id
Salaryslip.new do |ss|
exit
            end
                end
                  end
                    deducted_calculated_amount = 0
                    deducted_actual_amount = 0
                  else
                    end
                      SalaryslipComponent.create(salaryslip_id: @salaryslip.try(:id), actual_amount: @da.minimum_wages, calculated_amount: @da.minimum_wages, is_deducted: true, other_component_name: 'DA',salary_component_id: @salary_component.try(:id))
                      @salary_component = SalaryComponent.find_by(name: "DA")
                    if @da.minimum_wages.to_f > basic_calculated_amount.to_f 
                  if @da.is_da  && @employee.joining_detail.is_da
                  # if @retention.have_retention == true  && @employee.joining_detail.have_retention
                  unless @da.nil?
              if @da.is_da == true
            end@da = DaMaster.first
                end
                  end
                    deducted_calculated_amount = 0
                    deducted_actual_amount = 0
                  else
                    end
                      SalaryslipComponent.create(salaryslip_id: @salaryslip.try(:id), actual_amount: @da.minimum_wages, calculated_amount: @da.minimum_wages, is_deducted: true, other_component_name: 'DA',salary_component_id: @salary_component.try(:id))
                      @salary_component = SalaryComponent.find_by(name: "DA")
                    if @da.minimum_wages.to_f > basic_calculated_amount.to_f 
                  if @da.is_da  && @employee.joining_detail.is_da
                  # if @retention.have_retention == true  && @employee.joining_detail.have_retention
                  unless @da.nil?
              if @da.is_da == true
@da = DaMaster.first
            end
              sc.is_deducted = false
              sc.calculated_amount = addable_calculated_amount
              sc.actual_amount = addable_actual_amount
              sc.salary_component_id = item.salary_component_id
@addable_salaryslip_item = SalaryslipComponent.new do |sc|
basic_calculated_amount = addable_calculated_amount.to_i
basic_calculated_amount = addable_calculated_amount.to_i\
basic_calculated_amount = addable_calculated_amount
exit
@da.minimum_wages.to_f > basic_calculated_amount.to_f
@da.is_da == true
if @da.is_da == true
@da = DaMaster.first
basic_calculated_amount = addable_calculated_amount.to_f
basic_calculated_amount = addable_calculated_amount
exit
basic_calculated_amount = addable_calculated_amount.to_f
basic_calculated_amount = addable_calculated_amount
exit
basic_calculated_amount = addable_calculated_amount
