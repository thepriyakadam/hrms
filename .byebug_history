c
@leav_category = LeavCategory.where(is_active: true).pluck(:id)
tp @employee_leav_balances = EmployeeLeavBalance.where(employee_id: @employee.id,leav_category_id: @leav_category)
@employee_leav_balances = EmployeeLeavBalance.where(employee_id: @employee.id,leav_category_id: @leav_category)
@leav_category = LeavCategory.where(is_active: true,is_cashable: true).pluck(:id)
tp @leav_category = LeavCategory.where(is_active: true,is_cashable: true).pluck(:id)
exit
advance_salary.instalments.where(is_complete: false)
 advance_salary.instalments.where(is_complete: false) do |instalment|
exit
tp advance_salary.instalments.where(is_complete: false)
advance_salary.instalments.where(is_complete: false)
exit
params[:emp_id]
@employee = Employee.find(params[:emp_id])
emp_resignation_list
exit
@due_employee_details_2 = DueEmployeeDetail.where(employee_id: employee,is_confirmed: nil).count
@due_employee_details_1 = DueEmployeeDetail.where(employee_id: employee,is_confirmed: true).count
@due_employee_details_1 = DueEmployeeDetail.where(employee_id: employee,is_confirmed: true)
exit
@due_employee_details_1.present?
exit
DueAction.exists?(is_confirm: true,due_employee_detail_id: due_employee_detail)
exit
@due_action.is_exist(@due_action.due_employee_detail_id)
exit
is_exist(@due_action.due_employee_detail_id)
exit
@due_employee_detail = DueEmployeeDetail.find(params[:due_employee_detail_id])
exit
params[:due_employee_detail_id]
exit
params[:due_employee_detail_id]
@due_employee_detail = DueEmployeeDetail.find(params[:due_employee_detail_id])
c
tp ReportingEmployeeTransfer.create(reporting_master_id: @employee_transfer.reporting_master_id, employee_transfer_id: @employee_transfer.id, status: @employee_transfer.current_status)
ReportingEmployeeTransfer.create(reporting_master_id: @employee_transfer.reporting_master_id, employee_transfer_id: @employee_transfer.id, status: @employee_transfer.current_status)
tp @employee_transfer = EmployeeTransfer.new(employee_transfer_params)
@employee_transfer = EmployeeTransfer.new(employee_transfer_params)
exit
id="depwise_employee"
render 'employees/department_wise_employee'
get('/employees/collect_company_location_dropdown_with_label
exit
due_employee_detail.due_action.is_confirm
due_employee_detail
shutdown server
exit
c
exit
             <% end %>
              <small class="label label-success">Else</small>
              <% else %>
              <small class="label label-warning">Cancelled</small>
              <% when "Cancelled" %>
              <small class="label label-info">Approved & Send Next</small> -->
              < elsif employee_resignation.resign_status == "Approved & Send Next" %>
              <small class="label label-danger">FinalRejected</small><!-- 
              <% when "FinalRejected" %>
              <small class="label label-danger">SecondRejected</small>
              <% when "SecondRejected" %>
              <small class="label label-danger">FirstRejected</small>
              <% when "FirstRejected" %>
              <small class="label label-primary">FinalApproved</small>
              <<% when "FinalApproved" %>
              <small class="label label-primary">SecondApproved</small>
              <% when "SecondApproved" %>
              <small class="label label-primary">FirstApproved</small>
            <% when "FirstApproved" %>
              <small class="label label-danger">Pending</small>
            <% when "Pending" %>
            <% case er.resign_status %>
<% employee_resignation.resign_status.try(:each) do |er| %>
g
exit
@pending_resignation_requests = EmployeeResignation.where(is_pending: true, is_first_approved: nil,is_first_rejected: nil, is_cancelled: nil,reporting_master_id: current_user.employee_id)
exit
 @on_duty_request.last_half == true && @on_duty_request.last_half == true
@on_duty_request.last_half
